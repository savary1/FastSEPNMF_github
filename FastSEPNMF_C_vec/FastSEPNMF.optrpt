Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] FastSEPNMF.c(14,34)
  -> INLINE: (35,16) atoi(const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (36,21) atoi(const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (70,9) normalize_img(double *, long, int)
  -> INLINE: (85,12) max_Val(double *, long)
  -> INLINE: (100,26) max_Val(double *, long)
  -> INLINE: (103,7) max_Val(double *, long)
  -> INLINE: (135,8) max_val_extract_array(double *, long *, long)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at FastSEPNMF.c(344,5) inlined into FastSEPNMF.c(70,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FastSEPNMF.c(346,3) inlined into FastSEPNMF.c(70,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(346,3) inlined into FastSEPNMF.c(70,9)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(346,3) inlined into FastSEPNMF.c(70,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(346,3) inlined into FastSEPNMF.c(70,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at FastSEPNMF.c(351,5) inlined into FastSEPNMF.c(70,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(351,5) inlined into FastSEPNMF.c(70,9)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(351,5) inlined into FastSEPNMF.c(70,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(351,5) inlined into FastSEPNMF.c(70,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(358,5) inlined into FastSEPNMF.c(70,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at FastSEPNMF.c(75,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between normM[:] (76:9) and normM[:] (76:9)
LOOP END

LOOP BEGIN at FastSEPNMF.c(325,5) inlined into FastSEPNMF.c(85,12)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(325,5) inlined into FastSEPNMF.c(85,12)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(325,5) inlined into FastSEPNMF.c(85,12)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(92,2)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FastSEPNMF.c(92,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(92,2)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(92,2)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(92,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at FastSEPNMF.c(325,5) inlined into FastSEPNMF.c(100,26)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(325,5) inlined into FastSEPNMF.c(100,26)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(325,5) inlined into FastSEPNMF.c(100,26)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(325,5) inlined into FastSEPNMF.c(103,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(325,5) inlined into FastSEPNMF.c(103,7)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(325,5) inlined into FastSEPNMF.c(103,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(111,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(111,3)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(111,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at FastSEPNMF.c(111,3)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(111,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(122,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between b_pos_size (124:5) and b_pos_size (125:5)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at FastSEPNMF.c(122,3)
<Remainder>
LOOP END

LOOP BEGIN at FastSEPNMF.c(311,5) inlined into FastSEPNMF.c(135,8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between max_val (312:9) and max_val (313:13)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at FastSEPNMF.c(311,5) inlined into FastSEPNMF.c(135,8)
<Remainder>
LOOP END

LOOP BEGIN at FastSEPNMF.c(145,3)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(145,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(154,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FastSEPNMF.c(158,4)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(158,4)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(167,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(167,4)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(167,4)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(176,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between U[i+k*endmembers] (177:5) and U[i+k*endmembers] (177:5)
   LOOP END
LOOP END

LOOP BEGIN at FastSEPNMF.c(189,3)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(189,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(198,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between U[i+j*endmembers] (199:4) and U[i+j*endmembers] (199:4)
LOOP END

LOOP BEGIN at FastSEPNMF.c(208,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(208,3)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(208,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(218,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FastSEPNMF.c(221,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(221,4)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(221,4)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(225,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(225,4)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(225,4)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(229,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(229,4)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(229,4)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(229,4)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at FastSEPNMF.c(240,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FastSEPNMF.c(242,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(242,4)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(242,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at FastSEPNMF.c(253,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(253,3)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(253,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at FastSEPNMF.c(253,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at FastSEPNMF.c(272,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END


Non-optimizable loops:


LOOP BEGIN at FastSEPNMF.c(100,2)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

    Report from: Code generation optimizations [cg]

FastSEPNMF.c(92,2):remark #34026: call to memcpy implemented as a call to optimized library version
FastSEPNMF.c(14,34):remark #34051: REGISTER ALLOCATION : [main] FastSEPNMF.c:14

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm14]
        
    Routine temporaries
        Total         :    1194
            Global    :     306
            Local     :     888
        Regenerable   :     180
        Spilled       :      78
        
    Routine stack
        Variables     :     116 bytes*
            Reads     :      90 [1.77e+02 ~ 1.3%]
            Writes    :       2 [2.00e+00 ~ 0.0%]
        Spills        :     584 bytes*
            Reads     :     267 [6.21e+02 ~ 4.5%]
            Writes    :     116 [1.82e+02 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: max_val_extract_array(double *, long *, long)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (max_val_extract_array(double *, long *, long)) [3] FastSEPNMF.c(307,87)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at FastSEPNMF.c(311,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between max_val (312:9) and max_val (313:13)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at FastSEPNMF.c(311,5)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

FastSEPNMF.c(307,87):remark #34051: REGISTER ALLOCATION : [max_val_extract_array] FastSEPNMF.c:307

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm3]
        
    Routine temporaries
        Total         :      30
            Global    :      16
            Local     :      14
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: max_Val(double *, long)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (max_Val(double *, long)) [4] FastSEPNMF.c(321,52)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at FastSEPNMF.c(325,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(325,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(325,5)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

FastSEPNMF.c(321,52):remark #34051: REGISTER ALLOCATION : [max_Val] FastSEPNMF.c:321

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi zmm0-zmm2]
        
    Routine temporaries
        Total         :      31
            Global    :      13
            Local     :      18
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: normalize_img(double *, long, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (normalize_img(double *, long, int)) [5] FastSEPNMF.c(335,66)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at FastSEPNMF.c(344,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FastSEPNMF.c(346,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(346,3)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(346,3)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(346,3)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at FastSEPNMF.c(351,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(351,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(351,5)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(351,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(358,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

    Report from: Code generation optimizations [cg]

FastSEPNMF.c(335,66):remark #34051: REGISTER ALLOCATION : [normalize_img] FastSEPNMF.c:335

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rbp rsi rdi r8-r11 r14-r15 zmm0-zmm14]
        
    Routine temporaries
        Total         :     153
            Global    :      39
            Local     :     114
        Regenerable   :      16
        Spilled       :       4
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [4.00e+00 ~ 0.2%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
