Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.163 Build 20171018

Compiler options: -O3 -restrict -qopt-report-phase=vec,loop,openmp -qopt-report=3 -qopenmp -L/optshared/cuda/lib64 -o FastSEPNMF.o -c -w

Begin optimization report for: main(int, char **)

    Report from: OpenMP optimizations [openmp]

OpenMP Construct at FastSEPNMF.c(378,2) inlined into FastSEPNMF.c(125,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at FastSEPNMF.c(129,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at FastSEPNMF.c(366,2) inlined into FastSEPNMF.c(125,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FastSEPNMF.c(367,9) inlined into FastSEPNMF.c(125,9)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(367,9) inlined into FastSEPNMF.c(125,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 5.820 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(367,9) inlined into FastSEPNMF.c(125,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at FastSEPNMF.c(372,5) inlined into FastSEPNMF.c(125,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 36 
   remark #15477: vector cost: 20.000 
   remark #15478: estimated potential speedup: 1.770 
   remark #15486: divides: 1 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at FastSEPNMF.c(372,5) inlined into FastSEPNMF.c(125,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(372,5) inlined into FastSEPNMF.c(125,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(349,5) inlined into FastSEPNMF.c(141,12)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at FastSEPNMF.c(349,5) inlined into FastSEPNMF.c(141,12)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 4.250 
   remark #15478: estimated potential speedup: 1.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at FastSEPNMF.c(349,5) inlined into FastSEPNMF.c(141,12)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(144,2)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FastSEPNMF.c(144,2)
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.850 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(144,2)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at FastSEPNMF.c(166,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FastSEPNMF.c(349,5) inlined into FastSEPNMF.c(166,26)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(349,5) inlined into FastSEPNMF.c(166,26)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 4.250 
      remark #15478: estimated potential speedup: 1.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(349,5) inlined into FastSEPNMF.c(166,26)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(349,5) inlined into FastSEPNMF.c(168,7)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(349,5) inlined into FastSEPNMF.c(168,7)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 4.250 
      remark #15478: estimated potential speedup: 1.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(349,5) inlined into FastSEPNMF.c(168,7)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(171,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(171,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 33 
      remark #15477: vector cost: 9.250 
      remark #15478: estimated potential speedup: 3.420 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(171,3)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(171,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(171,3)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(177,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between b_pos_size (179:5) and b_pos_size (180:5)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(177,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(334,5) inlined into FastSEPNMF.c(186,8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between max_val (335:9) and max_val (336:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(334,5) inlined into FastSEPNMF.c(186,8)
   <Remainder>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(195,3)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at FastSEPNMF.c(195,3)
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.850 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(195,3)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(200,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at FastSEPNMF.c(203,4)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(203,4)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 3.580 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(203,4)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(203,4)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(208,4)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(208,4)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 7 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 4.290 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(208,4)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(208,4)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(212,4)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(212,4)
         remark #25084: Preprocess Loopnests: Moving Out Store    [ FastSEPNMF.c(212,26) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 5.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(212,4)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(212,4)
      <Remainder loop for vectorization>
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(220,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(220,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 3.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(220,3)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(224,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(224,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 8.750 
      remark #15478: estimated potential speedup: 3.410 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(224,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(224,3)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(229,3)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at FastSEPNMF.c(229,3)
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.850 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(229,3)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(234,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at FastSEPNMF.c(237,4)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(237,4)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 3.580 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(237,4)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(237,4)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(241,4)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(241,4)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 7 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 4.290 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(241,4)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(241,4)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(245,4)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(245,4)
         remark #25084: Preprocess Loopnests: Moving Out Store    [ FastSEPNMF.c(245,26) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 5.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(245,4)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at FastSEPNMF.c(245,4)
      <Remainder loop for vectorization>
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at FastSEPNMF.c(300,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at FastSEPNMF.c(378,2) inlined into FastSEPNMF.c(125,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 30 
   remark #15477: vector cost: 48.750 
   remark #15478: estimated potential speedup: 0.610 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at FastSEPNMF.c(130,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FastSEPNMF.c(131,3)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(131,3)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ FastSEPNMF.c(131,25) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 4.870 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(131,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: select_device()

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at FastSEPNMF.c(414,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at FastSEPNMF.c(438,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: max_val_extract_array(float *, long *, long)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at FastSEPNMF.c(334,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between max_val (335:9) and max_val (336:13)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at FastSEPNMF.c(334,5)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: max_Val(float *, long)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at FastSEPNMF.c(349,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at FastSEPNMF.c(349,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 4.250 
   remark #15478: estimated potential speedup: 1.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at FastSEPNMF.c(349,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: normalize_img(float *, long, int)

    Report from: OpenMP optimizations [openmp]

OpenMP Construct at FastSEPNMF.c(378,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at FastSEPNMF.c(366,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FastSEPNMF.c(367,9)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(367,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 5.820 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at FastSEPNMF.c(367,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at FastSEPNMF.c(372,5)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 36 
   remark #15477: vector cost: 20.000 
   remark #15478: estimated potential speedup: 1.770 
   remark #15486: divides: 1 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at FastSEPNMF.c(372,5)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FastSEPNMF.c(372,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at FastSEPNMF.c(378,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 30 
   remark #15477: vector cost: 48.750 
   remark #15478: estimated potential speedup: 0.610 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================
