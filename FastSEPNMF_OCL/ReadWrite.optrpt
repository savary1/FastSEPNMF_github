Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.163 Build 20171018

Compiler options: -O3 -restrict -qopt-report-phase=vec,loop,openmp -qopt-report=3 -qopenmp -L/optshared/cuda/lib64 -o ReadWrite.o -c -w

Begin optimization report for: cleanString(char *, char *)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at ReadWrite.c(15,6)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at ReadWrite.c(21,6)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END
===========================================================================

Begin optimization report for: readHeader(char *, int *, int *, int *, int *)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at ReadWrite.c(48,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: Load_Image(char *, float *, int, int, int, int)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at ReadWrite.c(105,6)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between imageVector[numBands*?+i] (109:9) and imageVector[numBands*?+i] (109:9)

   LOOP BEGIN at ReadWrite.c(106,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between imageVector[numBands*?+i] (109:9) and imageVector[numBands*?+i] (109:9)

      LOOP BEGIN at ReadWrite.c(107,8)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 37 
         remark #15477: vector cost: 60.250 
         remark #15478: estimated potential speedup: 0.610 
         remark #15482: vectorized math library calls: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ReadWrite.c(126,6)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between imageVector[numBands*?+i] (130:9) and imageVector[numBands*?+i] (130:9)

   LOOP BEGIN at ReadWrite.c(127,7)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25452: Original Order found to be proper, but by a close margin
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between imageVector[numBands*?+i] (130:9) and imageVector[numBands*?+i] (130:9)

      LOOP BEGIN at ReadWrite.c(128,8)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 35 
         remark #15477: vector cost: 59.750 
         remark #15478: estimated potential speedup: 0.580 
         remark #15482: vectorized math library calls: 1 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ReadWrite.c(145,6)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between imageVector[numBands*?+i] (149:9) and imageVector[numBands*?+i] (149:9)

   LOOP BEGIN at ReadWrite.c(146,7)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25452: Original Order found to be proper, but by a close margin
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between imageVector[numBands*?+i] (149:9) and imageVector[numBands*?+i] (149:9)

      LOOP BEGIN at ReadWrite.c(147,8)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 36 
         remark #15477: vector cost: 60.750 
         remark #15478: estimated potential speedup: 0.590 
         remark #15482: vectorized math library calls: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Load_Image_IIR(char *, float *, int, int, int)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at ReadWrite.c(189,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ReadWrite.c(190,6)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at ReadWrite.c(190,6)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 12 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 2.580 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ReadWrite.c(190,6)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at ReadWrite.c(190,6)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ReadWrite.c(206,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ReadWrite.c(207,6)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at ReadWrite.c(207,6)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 10 
      remark #15477: vector cost: 4.250 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ReadWrite.c(207,6)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at ReadWrite.c(207,6)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ReadWrite.c(223,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ReadWrite.c(224,6)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at ReadWrite.c(224,6)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 2.140 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ReadWrite.c(224,6)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at ReadWrite.c(224,6)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: writeResult(double *, const char *, int, int, int)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at ReadWrite.c(266,2)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ReadWrite.c(266,2)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at ReadWrite.c(266,2)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 3.290 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at ReadWrite.c(266,2)
   <Alternate Alignment Vectorized Loop>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at ReadWrite.c(266,2)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END
===========================================================================
